<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<!-- 
  namespace => 인터페이스의 패키지 및 이름과 일치해야 한다.
 -->
<mapper namespace="com.items.dao.BoardDao">

  <!-- 테이블의 컬럼과 객체 필드를 연결한다. -->
  <!-- application.properties에서 경로설정이 되어있기 때문에 Board라고만 적어도된다. -->
  <!-- property가 VO로 받을것 javaType은 Type이 무엇인지 -->
  <!-- column이 DB이름, property가 VO이름 -->
  <resultMap type="Board" id="boardMap">
    <id column="no" property="no"/>
    <result column="title" property="title"/>
    <result column="content" property="content"/>
    <result column="create_date" property="createDate"/>
    <result column="viewcount" property="viewCount"/>
    <result column="PHOTO_IMAGE" property="photoImage"/>
    <association property="writer" javaType="member">
      <id column="no" property="no"/>
      <result column="USER_ID" property="userID"/>
      <result column="email" property="email"/>
    </association>
  </resultMap>
  
  <resultMap type="Review" id="ReviewMap">
    <id column="no" property="no"/>
    <result column="BOARD_NO" property="boardNo"/>
    <result column="MEMBER_NO" property="memberNo"/>
    <result column="REVIEW_CONTENT" property="reviewText"/>
    <association property="writer" javaType="member">
      <id column="no" property="no"/>
      <result column="USER_ID" property="userID"/>
      <result column="email" property="email"/>
    </association>
  </resultMap>

  <!-- id => 인터페이스의 메서드 이름과 일치해야 한다. -->
  
  <!-- 게시판 리스트 -->
  <select id="findAll" resultMap="boardMap">
	SELECT  
	  b.no,
	  b.title,
	  b.create_Date,
	  b.viewCount,
	  m.no,
	  m.user_id,
	  m.email
	FROM
	  user2.board b JOIN user2.member m ON b.writer = m.email
	ORDER BY
	  b.no DESC
  </select>
  
  <!-- 게시물에 링크 개별링크 부여, no에 맞는 게시글 데이터 가져오기 -->
  <select id="findByNo" resultMap="boardMap" parameterType="int">
	 SELECT  
	  b.no,
	  b.title,
	  b.create_Date,
	  b.viewCount,
	  b.CONTENT,
	  b.VIEWCOUNT,
	  b.PHOTO_IMAGE,
	  m.no,
	  m.user_id,
	  m.email
	FROM  
	  user2.board b JOIN user2.member m ON b.writer = m.email
	WHERE b.NO = #{no}
	ORDER BY  
	  b.no DESC
  </select>
  
  <!-- no에 맞는 게시글에 댓글 리스트 가져오기 -->
  <select id="findByReview" resultMap="ReviewMap" parameterType="int">
	SELECT DISTINCT A.NO, A.BOARD_NO, A.MEMBER_NO, B.USER_ID, A.REVIEW_CONTENT 
	FROM
	  ( SELECT
		  r.NO,
		  r.BOARD_NO,
		  r.MEMBER_NO,
		  r.REVIEW_CONTENT 
		FROM  
		  user2.board b,  
		  user2.member m,
		  user2.review r
		WHERE b.NO = #{no} AND
			  b.NO = r.BOARD_NO AND
			  b.writer = m.email ) A,
		user2.MEMBER B
	WHERE A.MEMBER_NO = B.NO
	ORDER BY A.no DESC
  </select>
  
  <!-- 게시글 검색, String을 파라미터로 넘길 경우 -->
  <select id="searchFindAll" resultMap="boardMap" parameterType="String">
	 SELECT  
	  b.no,
	  b.title,
	  b.create_Date,
	  b.viewCount,
	  b.CONTENT,
	  b.VIEWCOUNT,
	  b.PHOTO_IMAGE,
	  m.no,
	  m.user_id,
	  m.email
	FROM  
	  user2.board b JOIN user2.member m ON b.writer = m.email
	WHERE b.title LIKE '%${searchWord}%' 
	OR  b.CONTENT LIKE '%${searchWord}%'
	ORDER BY  
	  b.no DESC
  </select>
  
  <!-- 조회수 증가 -->
  <update id="increaseViewCount" parameterType="int">
 	UPDATE user2.board 
 	SET VIEWCOUNT = VIEWCOUNT + 1 
 	WHERE NO=#{no}
  </update>
  
  <!-- 댓글등록 - 회원가입, 로그인 기능을 구현한 후에 세션을 통해서 현재 user가 누군지 알아내야함 아직 기능 구현이 안되 
  		있어서 user 정보를 하드코딩 해놓고 테스트 -->
  <!--parameterType="java.util.map" 이라고 쓰면 에러 발생함-->
  <insert id="insertReviewDao" parameterType="java.util.Map">
    INSERT INTO user2.review (NO, BOARD_NO, MEMBER_NO, REVIEW_CONTENT)
	SELECT  
		DISTINCT (SELECT NVL(MAX(no), 0) + 1 FROM user2.review),
		(SELECT
			  b.no
			FROM  
			  user2.board b,
			  user2.member m
			WHERE
			  m.user_id = #{userID} and
			  b.TITLE = #{boardTitle}),
		(SELECT
			  DISTINCT m.no
			FROM  
			  user2.review r,
			  user2.member m
			WHERE
			  r.MEMBER_NO = m.no and
			  m.user_id = #{loginUser}),
		#{reviewText}
	FROM user2.REVIEW r JOIN user2.MEMBER m ON r.MEMBER_NO = m.NO
  </insert>
  
  
  
  
  
  
 </mapper>